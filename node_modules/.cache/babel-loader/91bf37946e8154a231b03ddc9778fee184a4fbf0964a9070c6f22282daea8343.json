{"ast":null,"code":"var _jsxFileName = \"/Users/jiaweiyao/Documents/GitHub/mutual-insurance/src/Company/CompanyRegistration.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport UnemploymentInsuranceContract from '../smart-contract/UnemploymentInsurance.json'; // Import the compiled contract ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyRegistration = () => {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [web3, setWeb3] = useState(null);\n  const [roundContract, setRoundContract] = useState(null);\n  const [companyName, setCompanyName] = useState('');\n  const [hrWallet, setHrWallet] = useState('');\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const initializeWeb3 = async () => {\n      try {\n        const provider = await detectEthereumProvider();\n        if (provider) {\n          console.log(\"MetaMask detected.\");\n          const web3Instance = new Web3(provider);\n          await provider.request({\n            method: \"eth_requestAccounts\"\n          });\n          const accounts = await web3Instance.eth.getAccounts();\n          setUserAddress(accounts[0]);\n          setWeb3(web3Instance);\n          const roundContractInstance = new web3Instance.eth.Contract(UnemploymentInsuranceContract.abi, '0xcF5926543f08E3797E8E117546452861c5E2B5BE');\n          setRoundContract(roundContractInstance);\n        } else {\n          console.error(\"MetaMask not detected.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to connect to wallet:\", error);\n      }\n    };\n    initializeWeb3();\n  }, []);\n  const handleRegistration = async () => {\n    try {\n      setStatus('Waiting for transaction to be mined...');\n      await roundContract.methods.registerCompany(companyName, hrWallet).send({\n        from: userAddress\n      });\n      setStatus('Company registered successfully!');\n    } catch (error) {\n      console.error('Error registering company:', error);\n      setStatus('Error: Please check the console for details.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Company Registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"companyName\",\n        children: \"Company Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"companyName\",\n        value: companyName,\n        onChange: e => setCompanyName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"hrWallet\",\n        children: \"HR Wallet Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"hrWallet\",\n        value: hrWallet,\n        onChange: e => setHrWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegistration,\n      children: \"Register Company\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User Address: \", userAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(CompanyRegistration, \"4HCaSNaGDcCvKgziE/Ceckck5zQ=\");\n_c = CompanyRegistration;\nexport default CompanyRegistration;\nvar _c;\n$RefreshReg$(_c, \"CompanyRegistration\");","map":{"version":3,"names":["React","useEffect","useState","Web3","detectEthereumProvider","UnemploymentInsuranceContract","jsxDEV","_jsxDEV","CompanyRegistration","_s","userAddress","setUserAddress","web3","setWeb3","roundContract","setRoundContract","companyName","setCompanyName","hrWallet","setHrWallet","status","setStatus","initializeWeb3","provider","console","log","web3Instance","request","method","accounts","eth","getAccounts","roundContractInstance","Contract","abi","error","handleRegistration","methods","registerCompany","send","from","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/jiaweiyao/Documents/GitHub/mutual-insurance/src/Company/CompanyRegistration.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport UnemploymentInsuranceContract from '../smart-contract/UnemploymentInsurance.json'; // Import the compiled contract ABI\n\nconst CompanyRegistration = () => {\n    const [userAddress, setUserAddress] = useState('');\n    const [web3, setWeb3] = useState(null);\n    const [roundContract, setRoundContract] = useState(null);\n    const [companyName, setCompanyName] = useState('');\n    const [hrWallet, setHrWallet] = useState('');\n    const [status, setStatus] = useState('');\n\n    useEffect(() => {\n        const initializeWeb3 = async () => {\n            try {\n                const provider = await detectEthereumProvider();\n                if (provider) {\n                    console.log(\"MetaMask detected.\");\n                    const web3Instance = new Web3(provider);\n\n                    await provider.request({ method: \"eth_requestAccounts\" });\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setUserAddress(accounts[0]);\n                    setWeb3(web3Instance);\n\n                    const roundContractInstance = new web3Instance.eth.Contract(\n                        UnemploymentInsuranceContract.abi,\n                        '0xcF5926543f08E3797E8E117546452861c5E2B5BE'\n                    );\n                    setRoundContract(roundContractInstance);\n                } else {\n                    console.error(\"MetaMask not detected.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to connect to wallet:\", error);\n            }\n        };\n\n        initializeWeb3();\n    }, []);\n\n    const handleRegistration = async () => {\n        try {\n            setStatus('Waiting for transaction to be mined...');\n            await roundContract.methods.registerCompany(companyName, hrWallet).send({ from: userAddress });\n            setStatus('Company registered successfully!');\n        } catch (error) {\n            console.error('Error registering company:', error);\n            setStatus('Error: Please check the console for details.');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Company Registration</h2>\n            <div>\n                <label htmlFor=\"companyName\">Company Name:</label>\n                <input\n                    type=\"text\"\n                    id=\"companyName\"\n                    value={companyName}\n                    onChange={(e) => setCompanyName(e.target.value)}\n                />\n            </div>\n            <div>\n                <label htmlFor=\"hrWallet\">HR Wallet Address:</label>\n                <input\n                    type=\"text\"\n                    id=\"hrWallet\"\n                    value={hrWallet}\n                    onChange={(e) => setHrWallet(e.target.value)}\n                />\n            </div>\n            <button onClick={handleRegistration}>Register Company</button>\n            <div>{status}</div>\n            <div>User Address: {userAddress}</div>\n        </div>\n    );\n};\n\nexport default CompanyRegistration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}