{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\n/**\n * @_ignore:\n */\nexports.WordSize = 32;\nconst Padding = new Uint8Array(exports.WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\"then\"];\nconst _guard = {};\nfunction throwError(name, error) {\n  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n  wrapped.error = error;\n  throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nclass Result extends Array {\n  #names;\n  /**\n   *  @private\n   */\n  constructor(...args) {\n    // To properly sub-class Array so the other built-in\n    // functions work, the constructor has to behave fairly\n    // well. So, in the event we are created via fromItems()\n    // we build the read-only Result object we want, but on\n    // any other input, we use the default constructor\n    // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n    const guard = args[0];\n    let items = args[1];\n    let names = (args[2] || []).slice();\n    let wrap = true;\n    if (guard !== _guard) {\n      items = args;\n      names = [];\n      wrap = false;\n    }\n    // Can't just pass in ...items since an array of length 1\n    // is a special case in the super.\n    super(items.length);\n    items.forEach((item, index) => {\n      this[index] = item;\n    });\n    // Find all unique keys\n    const nameCounts = names.reduce((accum, name) => {\n      if (typeof name === \"string\") {\n        accum.set(name, (accum.get(name) || 0) + 1);\n      }\n      return accum;\n    }, new Map());\n    // Remove any key thats not unique\n    this.#names = Object.freeze(items.map((item, index) => {\n      const name = names[index];\n      if (name != null && nameCounts.get(name) === 1) {\n        return name;\n      }\n      return null;\n    }));\n    if (!wrap) {\n      return;\n    }\n    // A wrapped Result is immutable\n    Object.freeze(this);\n    // Proxy indices and names so we can trap deferred errors\n    return new Proxy(this, {\n      get: (target, prop, receiver) => {\n        if (typeof prop === \"string\") {\n          // Index accessor\n          if (prop.match(/^[0-9]+$/)) {\n            const index = (0, index_js_1.getNumber)(prop, \"%index\");\n            if (index < 0 || index >= this.length) {\n              throw new RangeError(\"out of result range\");\n            }\n            const item = target[index];\n            if (item instanceof Error) {\n              throwError(`index ${index}`, item);\n            }\n            return item;\n          }\n          // Pass important checks (like `then` for Promise) through\n          if (passProperties.indexOf(prop) >= 0) {\n            return Reflect.get(target, prop, receiver);\n          }\n          const value = target[prop];\n          if (value instanceof Function) {\n            // Make sure functions work with private variables\n            // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n            return function (...args) {\n              return value.apply(this === receiver ? target : this, args);\n            };\n          } else if (!(prop in target)) {\n            // Possible name accessor\n            return target.getValue.apply(this === receiver ? target : this, [prop]);\n          }\n        }\n        return Reflect.get(target, prop, receiver);\n      }\n    });\n  }\n  /**\n   *  Returns the Result as a normal Array. If %%deep%%, any children\n   *  which are Result objects are also converted to a normal Array.\n   *\n   *  This will throw if there are any outstanding deferred\n   *  errors.\n   */\n  toArray(deep) {\n    const result = [];\n    this.forEach((item, index) => {\n      if (item instanceof Error) {\n        throwError(`index ${index}`, item);\n      }\n      if (deep && item instanceof Result) {\n        item = item.toArray(deep);\n      }\n      result.push(item);\n    });\n    return result;\n  }\n  /**\n   *  Returns the Result as an Object with each name-value pair. If\n   *  %%deep%%, any children which are Result objects are also\n   *  converted to an Object.\n   *\n   *  This will throw if any value is unnamed, or if there are\n   *  any outstanding deferred errors.\n   */\n  toObject(deep) {\n    return this.#names.reduce((accum, name, index) => {\n      (0, index_js_1.assert)(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"toObject()\"\n      });\n      // Add values for names that don't conflict\n      if (!(name in accum)) {\n        let child = this.getValue(name);\n        if (deep && child instanceof Result) {\n          child = child.toObject(deep);\n        }\n        accum[name] = child;\n      }\n      return accum;\n    }, {});\n  }\n  /**\n   *  @_ignore\n   */\n  slice(start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (start < 0) {\n      start += this.length;\n      if (start < 0) {\n        start = 0;\n      }\n    }\n    if (end == null) {\n      end = this.length;\n    }\n    if (end < 0) {\n      end += this.length;\n      if (end < 0) {\n        end = 0;\n      }\n    }\n    if (end > this.length) {\n      end = this.length;\n    }\n    const result = [],\n      names = [];\n    for (let i = start; i < end; i++) {\n      result.push(this[i]);\n      names.push(this.#names[i]);\n    }\n    return new Result(_guard, result, names);\n  }\n  /**\n   *  @_ignore\n   */\n  filter(callback, thisArg) {\n    const result = [],\n      names = [];\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      if (item instanceof Error) {\n        throwError(`index ${i}`, item);\n      }\n      if (callback.call(thisArg, item, i, this)) {\n        result.push(item);\n        names.push(this.#names[i]);\n      }\n    }\n    return new Result(_guard, result, names);\n  }\n  /**\n   *  @_ignore\n   */\n  map(callback, thisArg) {\n    const result = [];\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      if (item instanceof Error) {\n        throwError(`index ${i}`, item);\n      }\n      result.push(callback.call(thisArg, item, i, this));\n    }\n    return result;\n  }\n  /**\n   *  Returns the value for %%name%%.\n   *\n   *  Since it is possible to have a key whose name conflicts with\n   *  a method on a [[Result]] or its superclass Array, or any\n   *  JavaScript keyword, this ensures all named values are still\n   *  accessible by name.\n   */\n  getValue(name) {\n    const index = this.#names.indexOf(name);\n    if (index === -1) {\n      return undefined;\n    }\n    const value = this[index];\n    if (value instanceof Error) {\n      throwError(`property ${JSON.stringify(name)}`, value.error);\n    }\n    return value;\n  }\n  /**\n   *  Creates a new [[Result]] for %%items%% with each entry\n   *  also accessible by its corresponding name in %%keys%%.\n   */\n  static fromItems(items, keys) {\n    return new Result(_guard, items, keys);\n  }\n}\nexports.Result = Result;\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nfunction checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n  checkErrors([], result);\n  return errors;\n}\nexports.checkResultErrors = checkResultErrors;\nfunction getValue(value) {\n  let bytes = (0, index_js_1.toBeArray)(value);\n  (0, index_js_1.assert)(bytes.length <= exports.WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", {\n    buffer: bytes,\n    length: exports.WordSize,\n    offset: bytes.length\n  });\n  if (bytes.length !== exports.WordSize) {\n    bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes.length % exports.WordSize), bytes]));\n  }\n  return bytes;\n}\n/**\n *  @_ignore\n */\nclass Coder {\n  // The coder name:\n  //   - address, uint256, tuple, array, etc.\n  name;\n  // The fully expanded type, including composite types:\n  //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n  type;\n  // The localName bound in the signature, in this example it is \"baz\":\n  //   - tuple(address foo, uint bar) baz\n  localName;\n  // Whether this type is dynamic:\n  //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n  //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n  dynamic;\n  constructor(name, type, localName, dynamic) {\n    (0, index_js_1.defineProperties)(this, {\n      name,\n      type,\n      localName,\n      dynamic\n    }, {\n      name: \"string\",\n      type: \"string\",\n      localName: \"string\",\n      dynamic: \"boolean\"\n    });\n  }\n  _throwError(message, value) {\n    (0, index_js_1.assertArgument)(false, message, this.localName, value);\n  }\n}\nexports.Coder = Coder;\n/**\n *  @_ignore\n */\nclass Writer {\n  // An array of WordSize lengthed objects to concatenation\n  #data;\n  #dataLength;\n  constructor() {\n    this.#data = [];\n    this.#dataLength = 0;\n  }\n  get data() {\n    return (0, index_js_1.concat)(this.#data);\n  }\n  get length() {\n    return this.#dataLength;\n  }\n  #writeData(data) {\n    this.#data.push(data);\n    this.#dataLength += data.length;\n    return data.length;\n  }\n  appendWriter(writer) {\n    return this.#writeData((0, index_js_1.getBytesCopy)(writer.data));\n  }\n  // Arrayish item; pad on the right to *nearest* WordSize\n  writeBytes(value) {\n    let bytes = (0, index_js_1.getBytesCopy)(value);\n    const paddingOffset = bytes.length % exports.WordSize;\n    if (paddingOffset) {\n      bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes, Padding.slice(paddingOffset)]));\n    }\n    return this.#writeData(bytes);\n  }\n  // Numeric item; pad on the left *to* WordSize\n  writeValue(value) {\n    return this.#writeData(getValue(value));\n  }\n  // Inserts a numeric place-holder, returning a callback that can\n  // be used to asjust the value later\n  writeUpdatableValue() {\n    const offset = this.#data.length;\n    this.#data.push(Padding);\n    this.#dataLength += exports.WordSize;\n    return value => {\n      this.#data[offset] = getValue(value);\n    };\n  }\n}\nexports.Writer = Writer;\n/**\n *  @_ignore\n */\nclass Reader {\n  // Allows incomplete unpadded data to be read; otherwise an error\n  // is raised if attempting to overrun the buffer. This is required\n  // to deal with an old Solidity bug, in which event data for\n  // external (not public thoguh) was tightly packed.\n  allowLoose;\n  #data;\n  #offset;\n  #bytesRead;\n  #parent;\n  #maxInflation;\n  constructor(data, allowLoose, maxInflation) {\n    (0, index_js_1.defineProperties)(this, {\n      allowLoose: !!allowLoose\n    });\n    this.#data = (0, index_js_1.getBytesCopy)(data);\n    this.#bytesRead = 0;\n    this.#parent = null;\n    this.#maxInflation = maxInflation != null ? maxInflation : 1024;\n    this.#offset = 0;\n  }\n  get data() {\n    return (0, index_js_1.hexlify)(this.#data);\n  }\n  get dataLength() {\n    return this.#data.length;\n  }\n  get consumed() {\n    return this.#offset;\n  }\n  get bytes() {\n    return new Uint8Array(this.#data);\n  }\n  #incrementBytesRead(count) {\n    if (this.#parent) {\n      return this.#parent.#incrementBytesRead(count);\n    }\n    this.#bytesRead += count;\n    // Check for excessive inflation (see: #4537)\n    (0, index_js_1.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`, \"BUFFER_OVERRUN\", {\n      buffer: (0, index_js_1.getBytesCopy)(this.#data),\n      offset: this.#offset,\n      length: count,\n      info: {\n        bytesRead: this.#bytesRead,\n        dataLength: this.dataLength\n      }\n    });\n  }\n  #peekBytes(offset, length, loose) {\n    let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;\n    if (this.#offset + alignedLength > this.#data.length) {\n      if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n        alignedLength = length;\n      } else {\n        (0, index_js_1.assert)(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n          buffer: (0, index_js_1.getBytesCopy)(this.#data),\n          length: this.#data.length,\n          offset: this.#offset + alignedLength\n        });\n      }\n    }\n    return this.#data.slice(this.#offset, this.#offset + alignedLength);\n  }\n  // Create a sub-reader with the same underlying data, but offset\n  subReader(offset) {\n    const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n    reader.#parent = this;\n    return reader;\n  }\n  // Read bytes\n  readBytes(length, loose) {\n    let bytes = this.#peekBytes(0, length, !!loose);\n    this.#incrementBytesRead(length);\n    this.#offset += bytes.length;\n    // @TODO: Make sure the length..end bytes are all 0?\n    return bytes.slice(0, length);\n  }\n  // Read a numeric values\n  readValue() {\n    return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));\n  }\n  readIndex() {\n    return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));\n  }\n}\nexports.Reader = Reader;","map":{"version":3,"names":["index_js_1","require","exports","WordSize","Padding","Uint8Array","passProperties","_guard","throwError","name","error","wrapped","Error","Result","Array","names","constructor","args","guard","items","slice","wrap","length","forEach","item","index","nameCounts","reduce","accum","set","get","Map","Object","freeze","map","Proxy","target","prop","receiver","match","getNumber","RangeError","indexOf","Reflect","value","Function","apply","getValue","toArray","deep","result","push","toObject","assert","operation","child","start","end","i","filter","callback","thisArg","call","undefined","JSON","stringify","fromItems","keys","checkResultErrors","errors","checkErrors","path","object","isArray","key","childPath","bytes","toBeArray","buffer","offset","getBytesCopy","concat","Coder","type","localName","dynamic","defineProperties","_throwError","message","assertArgument","Writer","data","dataLength","writeData","#writeData","appendWriter","writer","writeBytes","paddingOffset","writeValue","writeUpdatableValue","Reader","allowLoose","bytesRead","parent","maxInflation","hexlify","consumed","incrementBytesRead","#incrementBytesRead","count","info","peekBytes","#peekBytes","loose","alignedLength","Math","ceil","subReader","reader","readBytes","readValue","toBigInt","readIndex","toNumber"],"sources":["/Users/jiaweiyao/Documents/GitHub/mutual-insurance/node_modules/ethers/src.ts/abi/coders/abstract-coder.ts"],"sourcesContent":["\nimport {\n    defineProperties, concat, getBytesCopy, getNumber, hexlify,\n    toBeArray, toBigInt, toNumber,\n    assert, assertArgument\n} from \"../../utils/index.js\";\n\nimport type { BigNumberish, BytesLike } from \"../../utils/index.js\";\n\n/**\n * @_ignore:\n */\nexport const WordSize: number = 32;\nconst Padding = new Uint8Array(WordSize);\n\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [ \"then\" ];\n\nconst _guard = { };\n\nfunction throwError(name: string, error: Error): never {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${ name }`);\n    (<any>wrapped).error = error;\n    throw wrapped;\n}\n\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array<any> {\n    readonly #names: ReadonlyArray<null | string>;\n\n    [ K: string | number ]: any\n\n    /**\n     *  @private\n     */\n    constructor(...args: Array<any>) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items: Array<any> = args[1];\n        let names: Array<null | string> = (args[2] || [ ]).slice();\n\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [ ];\n            wrap = false;\n        }\n\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof(name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, <Map<string, number>>(new Map()));\n\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n\n        if (!wrap) { return; }\n\n        // A wrapped Result is immutable\n        Object.freeze(this);\n\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"string\") {\n\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${ index }`, item);\n                        }\n                        return item;\n                    }\n\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function(this: any, ...args: Array<any>) {\n                            return value.apply((this === receiver) ? target: this, args);\n                        };\n\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target: this, [ prop ]);\n                    }\n                }\n\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n\n    /**\n     *  Returns the Result as a normal Array. If %%deep%%, any children\n     *  which are Result objects are also converted to a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(deep?: boolean): Array<any> {\n        const result: Array<any> = [ ];\n        this.forEach((item, index) => {\n            if (item instanceof Error) { throwError(`index ${ index }`, item); }\n            if (deep && item instanceof Result) {\n                item = item.toArray(deep);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n\n    /**\n     *  Returns the Result as an Object with each name-value pair. If\n     *  %%deep%%, any children which are Result objects are also\n     *  converted to an Object.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(deep?: boolean): Record<string, any> {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                let child = this.getValue(name);\n                if (deep && child instanceof Result) {\n                    child = child.toObject(deep);\n                }\n                accum[name] = child;\n            }\n\n            return accum;\n        }, <Record<string, any>>{});\n    }\n\n    /**\n     *  @_ignore\n     */\n    slice(start?: number | undefined, end?: number | undefined): Result {\n        if (start == null) { start = 0; }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) { start = 0; }\n        }\n\n        if (end == null) { end = this.length; }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) { end = 0; }\n        }\n        if (end > this.length) { end = this.length; }\n\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    filter(callback: (el: any, index: number, array: Result) => boolean, thisArg?: any): Result {\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    map<T extends any = any>(callback: (el: any, index: number, array: Result) => T, thisArg?: any): Array<T> {\n        const result: Array<T> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            result.push(callback.call(thisArg, item, i, this));\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name: string): any {\n        const index = this.#names.indexOf(name);\n        if (index === -1) { return undefined; }\n\n        const value = this[index];\n\n        if (value instanceof Error) {\n            throwError(`property ${ JSON.stringify(name) }`, (<any>value).error);\n        }\n\n        return value;\n    }\n\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items: Array<any>, keys?: Array<null | string>): Result {\n        return new Result(_guard, items, keys);\n    }\n}\n\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error: any) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nfunction getValue(value: BigNumberish): Uint8Array {\n    let bytes = toBeArray(value);\n\n    assert (bytes.length <= WordSize, \"value out-of-bounds\",\n        \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([ Padding.slice(bytes.length % WordSize), bytes ]));\n    }\n\n    return bytes;\n}\n\n/**\n *  @_ignore\n */\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name!: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type!: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName!: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic!: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        defineProperties<Coder>(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n\n    _throwError(message: string, value: any): never {\n        assertArgument(false, message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data: Array<Uint8Array>;\n    #dataLength: number;\n\n    constructor() {\n        this.#data = [ ];\n        this.#dataLength = 0;\n    }\n\n    get data(): string {\n        return concat(this.#data);\n    }\n    get length(): number { return this.#dataLength; }\n\n    #writeData(data: Uint8Array): number {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([ bytes, Padding.slice(paddingOffset) ]))\n        }\n        return this.#writeData(bytes);\n    }\n\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value: BigNumberish): number {\n        return this.#writeData(getValue(value));\n    }\n\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value: BigNumberish) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    readonly allowLoose!: boolean;\n\n    readonly #data: Uint8Array;\n    #offset: number;\n\n    #bytesRead: number;\n    #parent: null | Reader;\n    #maxInflation: number;\n\n    constructor(data: BytesLike, allowLoose?: boolean, maxInflation?: number) {\n        defineProperties<Reader>(this, { allowLoose: !!allowLoose });\n\n        this.#data = getBytesCopy(data);\n        this.#bytesRead = 0;\n        this.#parent = null;\n        this.#maxInflation = (maxInflation != null) ? maxInflation: 1024;\n\n        this.#offset = 0;\n    }\n\n    get data(): string { return hexlify(this.#data); }\n    get dataLength(): number { return this.#data.length; }\n    get consumed(): number { return this.#offset; }\n    get bytes(): Uint8Array { return new Uint8Array(this.#data); }\n\n    #incrementBytesRead(count: number): void {\n        if (this.#parent) { return this.#parent.#incrementBytesRead(count); }\n\n        this.#bytesRead += count;\n\n        // Check for excessive inflation (see: #4537)\n        assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${ this.#maxInflation } ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`,  \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data), offset: this.#offset,\n            length: count, info: {\n                bytesRead: this.#bytesRead,\n                dataLength: this.dataLength\n            }\n        });\n    }\n\n    #peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            } else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength)\n    }\n\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset: number): Reader {\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n        reader.#parent = this;\n        return reader;\n    }\n\n    // Read bytes\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#incrementBytesRead(length);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    // Read a numeric values\n    readValue(): bigint {\n        return toBigInt(this.readBytes(WordSize));\n    }\n\n    readIndex(): number {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}