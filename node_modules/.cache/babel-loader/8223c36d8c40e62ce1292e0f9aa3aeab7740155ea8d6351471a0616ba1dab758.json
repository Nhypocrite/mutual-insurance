{"ast":null,"code":"var _jsxFileName = \"/Users/jiaweiyao/Documents/GitHub/mutual-insurance/src/Company/CompanyRegistration.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport UnemploymentInsuranceContract from '../smart-contract/UnemploymentInsurance.json'; // Import the compiled contract ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyRegistration = () => {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [web3, setWeb3] = useState(null);\n  const [roundContract, setRoundContract] = useState(null);\n  const [companyName, setCompanyName] = useState('');\n  const [hrWallet, setHrWallet] = useState('');\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const initializeWeb3 = async () => {\n      try {\n        // Check if MetaMask is installed and connected\n        if (window.ethereum) {\n          console.log(\"MetaMask detected.\");\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          });\n          const web3Instance = new Web3(window.ethereum);\n          const accounts = await web3Instance.eth.getAccounts();\n          setUserAddress(accounts[0]);\n          setWeb3(web3Instance);\n\n          // Check if MetaMask is connected to a network\n          const networkId = await web3Instance.eth.net.getId();\n          if (networkId !== undefined) {\n            // Hardcode the network ID for Ganache (replace <<GANACHE_NETWORK_ID>> with your Ganache network ID)\n            const deployedNetwork = UnemploymentInsuranceContract.networks['<<GANACHE_NETWORK_ID>>'];\n            const roundContractInstance = new web3Instance.eth.Contract(UnemploymentInsuranceContract.abi, deployedNetwork && deployedNetwork.address);\n            setRoundContract(roundContractInstance);\n          } else {\n            console.error(\"Failed to retrieve network ID from MetaMask. Please ensure MetaMask is connected to a network.\");\n          }\n        } else {\n          console.error(\"MetaMask not detected. Please install MetaMask to interact with this application.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to connect to MetaMask:\", error);\n      }\n    };\n    initializeWeb3();\n  }, []);\n  const handleRegistration = async () => {\n    try {\n      setStatus('Waiting for transaction to be mined...');\n      await roundContract.methods.registerCompany(companyName, hrWallet).send({\n        from: userAddress\n      });\n      setStatus('Company registered successfully!');\n    } catch (error) {\n      console.error('Error registering company:', error);\n      setStatus('Error: Please check the console for details.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Company Registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"companyName\",\n        children: \"Company Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"companyName\",\n        value: companyName,\n        onChange: e => setCompanyName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"hrWallet\",\n        children: \"HR Wallet Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"hrWallet\",\n        value: hrWallet,\n        onChange: e => setHrWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegistration,\n      children: \"Register Company\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User Address: \", userAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(CompanyRegistration, \"4HCaSNaGDcCvKgziE/Ceckck5zQ=\");\n_c = CompanyRegistration;\nexport default CompanyRegistration;\nvar _c;\n$RefreshReg$(_c, \"CompanyRegistration\");","map":{"version":3,"names":["React","useEffect","useState","Web3","UnemploymentInsuranceContract","jsxDEV","_jsxDEV","CompanyRegistration","_s","userAddress","setUserAddress","web3","setWeb3","roundContract","setRoundContract","companyName","setCompanyName","hrWallet","setHrWallet","status","setStatus","initializeWeb3","window","ethereum","console","log","request","method","web3Instance","accounts","eth","getAccounts","networkId","net","getId","undefined","deployedNetwork","networks","roundContractInstance","Contract","abi","address","error","handleRegistration","methods","registerCompany","send","from","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/jiaweiyao/Documents/GitHub/mutual-insurance/src/Company/CompanyRegistration.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport UnemploymentInsuranceContract from '../smart-contract/UnemploymentInsurance.json'; // Import the compiled contract ABI\n\nconst CompanyRegistration = () => {\n    const [userAddress, setUserAddress] = useState('');\n    const [web3, setWeb3] = useState(null);\n    const [roundContract, setRoundContract] = useState(null);\n    const [companyName, setCompanyName] = useState('');\n    const [hrWallet, setHrWallet] = useState('');\n    const [status, setStatus] = useState('');\n\n    useEffect(() => {\n        const initializeWeb3 = async () => {\n            try {\n                // Check if MetaMask is installed and connected\n                if (window.ethereum) {\n                    console.log(\"MetaMask detected.\");\n                    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                    const web3Instance = new Web3(window.ethereum);\n        \n                    const accounts = await web3Instance.eth.getAccounts();\n                    setUserAddress(accounts[0]);\n                    setWeb3(web3Instance);\n        \n                    // Check if MetaMask is connected to a network\n                    const networkId = await web3Instance.eth.net.getId();\n                    if (networkId !== undefined) {\n                        // Hardcode the network ID for Ganache (replace <<GANACHE_NETWORK_ID>> with your Ganache network ID)\n                        const deployedNetwork = UnemploymentInsuranceContract.networks['<<GANACHE_NETWORK_ID>>'];\n                        const roundContractInstance = new web3Instance.eth.Contract(\n                            UnemploymentInsuranceContract.abi,\n                            deployedNetwork && deployedNetwork.address\n                        );\n                        setRoundContract(roundContractInstance);\n                    } else {\n                        console.error(\"Failed to retrieve network ID from MetaMask. Please ensure MetaMask is connected to a network.\");\n                    }\n                } else {\n                    console.error(\"MetaMask not detected. Please install MetaMask to interact with this application.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to connect to MetaMask:\", error);\n            }\n        };\n\n        initializeWeb3();\n    }, []);\n\n    const handleRegistration = async () => {\n        try {\n            setStatus('Waiting for transaction to be mined...');\n            await roundContract.methods.registerCompany(companyName, hrWallet).send({ from: userAddress });\n            setStatus('Company registered successfully!');\n        } catch (error) {\n            console.error('Error registering company:', error);\n            setStatus('Error: Please check the console for details.');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Company Registration</h2>\n            <div>\n                <label htmlFor=\"companyName\">Company Name:</label>\n                <input\n                    type=\"text\"\n                    id=\"companyName\"\n                    value={companyName}\n                    onChange={(e) => setCompanyName(e.target.value)}\n                />\n            </div>\n            <div>\n                <label htmlFor=\"hrWallet\">HR Wallet Address:</label>\n                <input\n                    type=\"text\"\n                    id=\"hrWallet\"\n                    value={hrWallet}\n                    onChange={(e) => setHrWallet(e.target.value)}\n                />\n            </div>\n            <button onClick={handleRegistration}>Register Company</button>\n            <div>{status}</div>\n            <div>User Address: {userAddress}</div>\n        </div>\n    );\n};\n\nexport default CompanyRegistration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}